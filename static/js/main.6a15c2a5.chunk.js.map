{"version":3,"sources":["components/CommentForm.js","components/Like.js","components/FromNow.js","components/Comment.js","components/CommentMerge.js","components/CommentList.js","components/CommentView.js","App.js","serviceWorker.js","index.js"],"names":["CommentForm","state","author","content","likes","time","handleSubmit","e","preventDefault","_this","Date","getTime","props","onCreate","setState","handleChange","Object","defineProperty","target","name","value","handleKeyUp","keyCode","type","this","react_default","a","createElement","className","onKeyUp","placeholder","onChange","onClick","Component","Like","like","likeCount","likeCmt","onUpdate","isLike","FromNow","getTimeAgo","console","log","cur_time","month","day","hour","minute","second","parseInt","Comment","isComment","editing","inputReply","showReply","handleToggleEdit","_this$props","data","id","handleUpdateLikes","_this$props2","updateLikes","handleRemove","_this$props3","onRemove","nextProps","nextState","_this$props$data","_this$state","react","components_FromNow","components_Like","cmtCount","CommentMerge","showReplyForm","createReply","info","onCreateReply","reply","replyList","length","map","components_Comment","key","components_CommentForm","CommentList","list","components_CommentMerge","defaultProps","CommentView","comment_id","sortBy","information","handleSort","getAttribute","handleCreate","concat","objectSpread","handleCreateReply","handleUpdate","commentId","split","toString","rep","filter","arr_len","sort","b","components_CommentList","App","BrowserRouter","Route","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a15c2a5.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass CommentForm extends Component {\n    state = {\n        author: '',\n        content: '',\n        likes: 0,\n        time: '',\n    }\n\n    handleSubmit = (e) => {\n        // preventDefault: submit의 기본 이벤트 동작을 막음\n        e.preventDefault();\n        const state = this.state;\n        // const type = this.props.type;\n        // author, content 값이 있을때만 댓글 입력하도록 함\n        // 향후 button disabled/abled 로 관리\n        if (state.author && state.content) {\n            // 댓글 작성한 시간 불러와서 state에 저장\n            this.state.time = new Date().getTime();\n            this.props.onCreate(this.state);\n            // submit 후 초기화\n            this.setState({\n                author: '',\n                content: '',\n                likes: 0,\n                time: '',\n            });\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    handleKeyUp = (e) => {\n        // Enter 키 눌렀을 떄 댓글 입력되도록 함\n        if (e.keyCode === 13) {\n            this.handleSubmit(e);\n        }\n    }\n\n    render() {\n        const {type} = this.props;\n\n        return (\n            <form className={(type === \"comment\") ? \"commentFormArea\" : \"replyFormArea\"}\n                    onKeyUp={this.handleKeyUp}>\n                <div className=\"inputAuthor\">\n                    <input name=\"author\" className=\"inputId\"\n                        value={this.state.author}\n                        placeholder=\"아이디\"\n                        onChange={this.handleChange}></input>\n                </div>\n                <div className=\"inputForm\">\n                    <textarea className=\"inputContent\" name=\"content\"\n                    value={this.state.content}\n                    placeholder=\"댓글을 달아보세요\"\n                    onChange={this.handleChange}></textarea>\n                    <div className=\"submitArea\">\n                        <input type=\"button\" className=\"submitBtn\"\n                        onClick={this.handleSubmit}\n                        value=\"게시\"/>\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default CommentForm;","import React, { Component } from 'react';\n\nclass Like extends Component {\n    state = {\n        like: true,\n        likeCount: this.props.likes,\n    }\n\n    /**\n     * 댓글의 원래 '좋아요' 수에서\n     * '좋아요'버튼을 한번 누르면 ++, 그 상태에서 한번 더 누르면 --\n     */\n    likeCmt = () => {\n        const {onUpdate} = this.props;\n        let {likes} = this.props;\n        let isLike = this.state.like;\n\n        if (isLike) {\n            likes++;\n\n        } else {\n            likes--;\n        }\n        \n        onUpdate(likes);\n\n        this.setState({\n            like: !isLike,\n            likeCount: likes,\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"likeArea\">\n                <input type=\"button\" value=\"좋아요\" onClick={this.likeCmt}></input>\n                <span>{this.state.likeCount}</span>\n            </div>\n        );\n    }\n}\n\nexport default Like;","import React, { Component } from 'react';\n\nclass FromNow extends Component {\n    // 경과시간 계산\n    getTimeAgo = () => {\n        const time = this.props.time;\n        console.log(\"before_time = \" + time);\n        // 현재 시간 불러와서 차이 계산\n        const cur_time = new Date().getTime();\n        console.log(\"cur_time = \" + cur_time);\n        let second = (cur_time - time) / 1000;\n        let year, month, day, hour, minute, elapsed;\n\n        if (second > 60) {\n            minute = second / 60;\n            if (minute > 60) {\n                hour = minute / 60;\n                if (hour > 24) {\n                    day = hour / 24;\n                    if (day > 30) {\n                        month = day / 30;\n                        if (month > 12) {\n                            year = month / 12;\n                            elapsed = parseInt(year) + \"년\";\n                        } else {\n                            elapsed = parseInt(month) + \"달\";\n                        }\n                    } else {\n                        elapsed = parseInt(day) + \"일\";\n                    }\n                } else {\n                    elapsed = parseInt(hour) + \"시간\";\n                }\n            } else {\n                elapsed = parseInt(minute) + \"분\";\n            }\n        } else {\n            elapsed = \"몇 초\";\n        }\n\n        return elapsed\n    }\n\n    render() {\n        return (\n            <div className=\"time\">\n                <span className=\"fromNow\">{this.getTimeAgo()} 전</span>\n            </div>\n        );\n    }\n}\n\nexport default FromNow;","import React, { Component, Fragment } from 'react';\nimport Like from './Like';\nimport FromNow from './FromNow';\n\nclass Comment extends Component {\n    state = {\n        isComment: (this.props.type === \"comment\"),\n        editing: false,\n    }\n\n    // 변경된 부분만 업데이트\n    shouldComponentUpdate(nextProps, nextState) {\n        if(this.state !== nextState){\n            return true;\n        }\n\n        return this.props.data !== nextProps.data;\n    }\n\n    // 답글 달기\n    inputReply = () => {\n        const {showReply} = this.props;\n        showReply();\n    }\n\n    // editing 값에 따라 수정/적용\n    handleToggleEdit = () => {\n        const {data, onUpdate} = this.props;\n        if (this.state.editing) {\n            // 수정 모드: 수정된 content값을 업데이트하도록 함\n            onUpdate(data.id, {\n                content: this.state.content,\n            });\n\n        } else {\n            // 적용 모드: 수정된(또는 원본) 내용을 가져와서 State에 세팅\n            this.setState({\n                content: data.content,\n            });\n        }\n\n        // editing 값을 반전시킴\n        this.setState({\n            editing: !this.state.editing,\n        })\n    }\n\n    // '좋아요' 수 반영\n    handleUpdateLikes = (likes) => {\n        const {data, updateLikes} = this.props;\n        updateLikes(data.id, likes);\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value,\n        });\n    }\n\n    handleKeyUp = (e) => {\n        // Enter 키 눌렀을 떄 댓글 수정되도록 함\n        if (e.keyCode === 13) {\n            this.handleToggleEdit();\n        }\n    }\n\n    // 댓글 삭제\n    handleRemove = () => {\n        const {data, onRemove} = this.props;\n        onRemove(data.id);\n    }\n\n    render() {\n        const {author, content, likes, time} = this.props.data;\n        const {isComment, editing} = this.state;\n\n        return (\n            <div className={isComment ? \"comment\" : \"reply\"}>\n                <div className=\"author\">{author}</div>\n                {\n                    editing ? (\n                        <Fragment>\n                            <div className=\"contentArea\">\n                                <input name=\"content\" value={this.state.content}\n                                onChange={this.handleChange}\n                                onKeyUp={this.handleKeyUp} />\n                            </div>\n                        </Fragment>\n                    ) : (\n                        <Fragment>\n                            <div>{content}</div>\n                        </Fragment>\n                    )\n                }\n                <div className=\"commentFooterArea\">\n                    <div className=\"timeReplyArea\">\n                        <FromNow time={time}/>\n                        {\n                            isComment ? (\n                                <Fragment>\n                                    <span>·</span>\n                                    <a className=\"replyArea\" onClick={this.inputReply}>\n                                        <span>답글 달기</span>\n                                    </a>\n                                </Fragment>\n                            ) : ''\n                        }\n                    </div>\n                    <div className=\"updateArea\">\n                        <Like likes={likes} onUpdate={this.handleUpdateLikes}/>\n                        <span>{this.state.cmtCount}</span>\n                        <input type=\"button\" value={editing ? \"적용\" : \"수정\"}\n                                onClick={this.handleToggleEdit}></input>\n                        <input type=\"button\" value=\"삭제\"\n                                onClick={this.handleRemove}></input>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Comment;","import React, { Component, Fragment } from 'react';\nimport Comment from './Comment';\nimport CommentForm from './CommentForm';\n\nclass CommentMerge extends Component {\n    state = {\n        showReply: false,\n    }\n\n    // 하단에 답글 Form 생성\n    showReplyForm = () => {\n        this.setState({\n            showReply: !this.state.showReply,\n        });\n    }\n\n    // 답글 입력\n    createReply = (data) => {\n        const {info, onCreateReply} = this.props;\n        onCreateReply(info.id, data);\n    }\n\n    render() {\n        const {info, onUpdate, onRemove, updateLikes} = this.props;\n        const {showReply} = this.state;\n\n        const reply = info.reply;\n        let replyList = '';\n        if (reply && reply.length > 0) {\n            replyList = reply.map(\n                reply => (<Comment type=\"reply\"\n                            data={reply} key={reply.id}\n                            onUpdate={onUpdate}\n                            onRemove={onRemove}\n                            updateLikes={updateLikes}/>)\n            )\n        }\n\n        return (\n            <div className=\"commentWrap\">\n                <Comment type=\"comment\"\n                        data={info} key={info.id}\n                        onUpdate={onUpdate}\n                        onRemove={onRemove}\n                        updateLikes={updateLikes}\n                        showReply={this.showReplyForm}/>\n                {replyList}\n                {\n                    showReply && (\n                        <Fragment>\n                            <CommentForm type=\"reply\" onCreate={this.createReply}/>\n                        </Fragment>\n                    )\n                }\n            </div>\n        );\n    }\n}\n\nexport default CommentMerge;","import React, { Component } from 'react';\nimport CommentMerge from './CommentMerge';\n\nclass CommentList extends Component {\n    static defaultProps = {\n        data: []\n    }\n    \n    render() {\n        const {data, onUpdate, onRemove, updateLikes, onCreateReply} = this.props;\n\n        const list = data.map(\n            info => (<CommentMerge info={info} key={info.id}\n                                    onUpdate={onUpdate}\n                                    onRemove={onRemove}\n                                    updateLikes={updateLikes}\n                                    onCreateReply={onCreateReply}/>)\n        )\n\n        return (\n            <div className=\"commentList\">\n                {list}\n            </div>\n        );\n    }\n}\n\nexport default CommentList;","import React, { Component } from 'react';\nimport CommentForm from './CommentForm';\nimport CommentList from './CommentList';\nimport './Comment.css';\n\nclass CommentView extends Component {\n    // 댓글마다 고유한 id값\n    comment_id = 3;\n\n    state = {\n        sortBy: \"likes\",\n        information: [{\n            id: 0,\n            author: 'sjyoung',\n            content: '안녕하세요',\n            likes: 0,\n            time: 1544064880438,\n            reply: [{\n                id: '0-0',\n                author: 'kkk',\n                content: '반갑습니다',\n                likes: 0,\n                time: 1544089503275,\n            },\n            {\n                id: '0-1',\n                author: 'sjyoung',\n                content: '네~~ 반가워요^^',\n                likes: 0,\n                time: 1544089503444,\n            }]\n        },\n        {\n            id: 1,\n            author: 'julia',\n            content: '안녕~~',\n            likes: 4,\n            time: 1544007341933,\n            reply: [],\n        },\n        {\n            id: 2,\n            author: 'herry0917',\n            content: '???',\n            likes: 1,\n            time: 1544081416151,\n            reply: [],\n        }]\n    }\n\n    /**\n     * 댓글 정렬 (디폴트: 추천순 정렬)\n     * 여기서는 정렬기준을 on/off해주고,\n     * 렌더링할 때 이 기준에 따라 정렬되도록 함\n     */\n    handleSort = (e) => {\n        let {sortBy} = this.state;\n        const type = e.target.getAttribute('name');\n\n        if (sortBy !== type) {\n            this.setState({\n                sortBy: type,\n            });\n        }\n    }\n\n    // 댓글 입력\n    handleCreate = (data) => {\n        const {information} = this.state;\n        this.setState({\n          information: information.concat({\n            // data가 추가될때마다 id 값 ++\n            ...data,\n            id: this.comment_id++,\n            reply: [],\n          })\n        });\n    }\n\n    // 답글 입력\n    handleCreateReply = (id, data) => {\n        const {information} = this.state;\n\n        this.setState({\n            information: information.map(\n                info => {\n                    if (info.id === id) {\n                        return {\n                            id: info.id,\n                            author: info.author,\n                            content: info.content,\n                            likes: info.likes,\n                            time: info.time,\n                            reply: info.reply.concat({\n                                // 답글이 추가될 때 id 설정\n                                id: info.id + \"-\" + info.reply.length,\n                                ...data\n                            })\n                        }\n                    }\n                    return info;\n                }\n            )\n        });\n    }\n\n    // 댓글 수정\n    handleUpdate = (id, data) => {\n        let {information} = this.state;\n        // id 의 type으로 댓글/답글 여부 판단\n        const isReply = (typeof(id) === 'string');\n\n        if (isReply) {\n            // 댓글의 답글 수정\n            const idArr = id.split('-');\n            const commentId = idArr[0];\n\n            this.setState({\n                information: information.map(\n                    info => {\n                        console.log(info.id.toString() + \"===\" + commentId);\n                        if (info.id.toString() === commentId) {\n                            let reply = info.reply;\n                            return {\n                                id: info.id,\n                                author: info.author,\n                                content: info.content,\n                                likes: info.likes,\n                                time: info.time,\n                                reply: reply.map(\n                                    rep => {\n                                        console.log(rep.id + \"===\" + id);\n                                        if (rep.id === id) {\n                                            return {\n                                                id: rep.id,\n                                                author: rep.author,\n                                                time: rep.time,\n                                                likes: rep.likes,\n                                                ...data\n                                            }\n                                        }\n                                        return rep;\n                                })\n                                \n                            }\n                        }\n                        return info;\n                    }\n                )\n            });\n            \n        } else {\n            // 기본 댓글 수정\n            this.setState({\n                information: information.map(\n                    info => {\n                        if (info.id === id) {\n                            return {\n                                id: id,\n                                author: info.author,\n                                time: info.time,\n                                likes: info.likes,\n                                reply: info.reply,\n                                ...data,\n                            };\n                        }\n                        return info;\n                    }\n                )\n            });\n        }\n    }\n\n    // 좋아요 수 반영\n    updateLikes = (id, likes) => {\n        const {information} = this.state;\n        // id 의 type으로 댓글/답글 여부 판단\n        const isReply = (typeof(id) === 'string');\n\n        if (isReply) {\n            // 답글의 좋아요 반영\n            const idArr = id.split('-');\n            const commentId = idArr[0];\n\n            this.setState({\n                information: information.map(\n                    info => {\n                        // console.log(info.id.toString() + \"===\" + commentId);\n                        if (info.id.toString() === commentId) {\n                            let reply = info.reply;\n                            return {\n                                id: info.id,\n                                author: info.author,\n                                content: info.content,\n                                likes: info.likes,\n                                time: info.time,\n                                reply: reply.map(\n                                    rep => {\n                                        // console.log(rep.id + \"===\" + id);\n                                        if (rep.id === id) {\n                                            return {\n                                                id: rep.id,\n                                                author: rep.author,\n                                                content: rep.content,\n                                                time: rep.time,\n                                                likes: likes,\n                                            }\n                                        }\n                                        return rep;\n                                })\n                                \n                            }\n                        }\n                        return info;\n                    }\n                )\n            });\n\n        } else {\n            // 댓글의 좋아요 반영\n            this.setState({\n                information: information.map(\n                    info => {\n                        if (info.id === id) {\n                            return {\n                                id: id,\n                                author: info.author,\n                                content: info.content,\n                                likes: likes,\n                                time: info.time,\n                                reply: info.reply,\n                            };\n                        }\n                        return info;\n                    }\n                )\n            });\n        }\n    }\n\n    // 댓글 삭제\n    handleRemove = (id) => {\n        const {information} = this.state;\n        // id 의 type으로 댓글/답글 여부 판단\n        const isReply = (typeof(id) === 'string');\n\n        if (isReply) {\n            // 답글 삭제\n            const idArr = id.split('-');\n            const commentId = idArr[0];\n\n            this.setState({\n                information: information.filter(info => info.id !== id)\n            });\n\n            this.setState({\n                information: information.map(\n                    info => {\n                        console.log(info.id.toString() + \"===\" + commentId);\n                        if (info.id.toString() === commentId) {\n                            let reply = info.reply;\n                            return {\n                                id: info.id,\n                                author: info.author,\n                                content: info.content,\n                                likes: info.likes,\n                                time: info.time,\n                                reply: reply.filter(rep => rep.id !== id),\n                            }\n                        }\n                        return info;\n                    }\n                )\n            });\n\n        } else {\n            // 댓글 삭제\n            this.setState({\n                information: information.filter(info => info.id !== id)\n            });\n        }        \n    }\n    \n    render() {\n        let {sortBy, information} = this.state;\n        const arr_len = information.length;\n\n        // 기준(추천순/최신순)에 따라 정렬 수행\n        information = information.sort(function(a, b) {\n            return b[sortBy] - a[sortBy];\n        });\n\n        return (\n            <div className=\"commentListWrap\">\n                <div className=\"commentListFunc\">\n                    <div className=\"commentCount\">\n                        <span>{arr_len}</span><span>개의 댓글</span>\n                    </div>\n                    <div className=\"commentSort\">\n                        <div className={(sortBy === \"likes\") ? \"sortSelected\" : \"sort\"}\n                            onClick={this.handleSort}>\n                            <span name=\"likes\">추천순</span>\n                        </div>\n                        <div className=\"sortSep\"></div>\n                        <div className={(sortBy === \"time\") ? \"sortSelected\" : \"sort\"}\n                            onClick={this.handleSort}>\n                            <span name=\"time\">최신순</span>\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <CommentList data={information}\n                    onUpdate={this.handleUpdate}\n                    onRemove={this.handleRemove}\n                    updateLikes={this.updateLikes}\n                    onCreateReply={this.handleCreateReply}/>\n                    <hr />\n                    <CommentForm type=\"comment\" onCreate={this.handleCreate}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CommentView;","import React, { Component } from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport CommentView from './components/CommentView';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Route path=\"/\" component={CommentView}/>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}